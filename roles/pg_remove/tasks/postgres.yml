---
#--------------------------------------------------------------#
# Remove Follower                                   [pg_replica]
#--------------------------------------------------------------#
# remove followers first to avoid unnecessary failover, especially when removing entire cluster
- name: remove postgres replica
  tags: pg_replica
  become: yes
  ignore_errors: yes
  when: pg_role != 'primary'
  block:

    - name: stop and disable patroni replica service
      systemd: name=patroni state=stopped enabled=no daemon_reload=yes

    - name: stop and disable postgres replica service
      systemd: name=postgres state=stopped enabled=no daemon_reload=yes

    # in case of maintenance mode
    - name: shutdown postgres replica with force
      become_user: "{{ pg_dbsu }}"
      shell: "{{ pg_bin_dir }}/pg_ctl -D {{ pg_data }} stop -m immediate; /bin/true"
      args: { executable: /bin/bash }

#--------------------------------------------------------------#
# Remove Leader                                     [pg_primary]
#--------------------------------------------------------------#
- name: remove postgres primary
  tags: pg_primary
  become: yes
  ignore_errors: yes
  when: pg_role == 'primary'
  block:

    - name: stop and disable patroni primary service
      systemd: name=patroni state=stopped enabled=no daemon_reload=yes

    - name: stop and disable postgres primary service
      systemd: name=postgres state=stopped enabled=no daemon_reload=yes

    # in case of maintenance mode
    - name: shutdown postgres primary with force
      become_user: "{{ pg_dbsu }}"
      shell: "{{ pg_bin_dir }}/pg_ctl -D {{ pg_data }} stop -m immediate; /bin/true"
      args: { executable: /bin/bash }

#--------------------------------------------------------------#
# Remove ETCD Meta Data                                [pg_meta]
#--------------------------------------------------------------#
# when cleanup primary, remove etcd metadata, too
- name: remove postgres metadata from etcd
  tags: pg_meta
  ignore_errors: true
  when: pg_role == 'primary' and pg_cluster != ''
  delegate_to: '{{ admin_ip }}'
  become: yes
  shell: |
    {% if pg_mode == 'citus' %}
    META_DIR="{{ pg_namespace|default('/pg') }}/{{ pg_shard }}/{{ pg_group }}"
    {% else %}
    META_DIR="{{ pg_namespace|default('/pg') }}/{{ pg_cluster }}"
    {% endif %}
    export ETCDCTL_ENDPOINTS="{% for ip in groups['etcd']|sort %}{% if not loop.first %},{% endif %}https://{{ ip }}:{{ etcd_port }}{% endfor %}"
    export ETCDCTL_CACERT=/etc/pki/ca.crt
    export ETCDCTL_CERT=/etc/pki/infra.crt
    export ETCDCTL_KEY=/etc/pki/infra.key
    etcdctl del "${META_DIR}" --prefix=true
    /bin/true
  args: { executable: /bin/bash }

...
